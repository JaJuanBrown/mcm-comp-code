---
title: "MCM Project"
format: html
editor: visual
---

## Importing Libraries

```{r include=FALSE}
#Installing Packages
library(janitor)
library(Metrics)
library(readxl)
library(tidyverse)
library(tidymodels)
library("AmesHousing")
library(stringr)
library("olsrr")
library("glmnet")
library("doParallel")
library(readr)
library(maps)
library(viridis)
library(usmap)
library(kknn)
library(MASS)
library(rpart)
library(rpart.plot)
library(keras)
library(randomForest)
library(discrim)
library(caret)
library(gbm)
library(xgboost)
library(vip)
library(AICcmodavg)
all_cores<-parallel::detectCores()
cl<- makePSOCKcluster(all_cores)
registerDoParallel(cl)
```

## Importing Data

```{r}
data<-read_excel("Problem_C_Data_Wordle.xlsx", skip=1) %>% 
  clean_names()
difficulty_data <- read_excel("difficulty_data.xlsx")
data$difficulty<-difficulty_data$difficulty
```

## Exploratory Analysis

```{r}
#Visualizing Relationships

#Comparing Date to number of people that participate
data %>% 
  ggplot(aes(x=date, y=number_of_reported_results))+
  geom_point()

#Are people getting better
data %>% 
  ggplot(aes(x=date, y=data$x7_or_more_tries_x))+
  geom_point()

#Are more people trying hard mode
data %>% 
  ggplot(aes(x=date, y=data$number_in_hard_mode))+
  geom_point()

#First attempt Guesses over time
data %>% 
  ggplot(aes(x=date, y=data$x1_try))+
  geom_point()



```

## Problem 1: Predicting number of players

This needs to be a regression model. This data is in no way linear so the first attempt is to create a nonlinear regression method.

```{r}
#Creating Data splits
set.seed(1234)

split<-initial_split(data, prop = .9)
training_data<-training(split)
test_data<-testing(split)

#The Future Date we want to predict the participants for
future_date<-data_frame(date = as.Date(x = "2023/3/1"),
                        contest_number = 620)

```

## Basic Decision Tree

```{r}
#Tuned Model
tuned_reg_tree<-decision_tree(mode = "regression", engine = "rpart", cost_complexity = 0.0005623413, tree_depth = 11, min_n = 2)

```

## Boosted Tree

```{r}
#Updating Workflow with Tuned Model and Fitting it to Training Data

tuned_reg_xgb<-boost_tree(mode = "regression", engine = "xgboost",mtry = 2, trees = 1000, min_n = 13, tree_depth = 6, learn_rate = 0.01872842, loss_reduction = 1.647096, sample_size = 0.9797893)

```

## Support Vector Machine Regression

```{r}
#Updating Workflow with Tuned Model and Fitting it to Training Data

tuned_svm<-svm_rbf(mode = "regression", engine = "kernlab", cost = 32, rbf_sigma = 1, margin = 0.1)

```

## Comparing Regressions

## Storing Tuned Models

```{r}
difficulty<-c()
for (i in 1:nrow(data)){
  current_row=data[i,]
  #Determining the difficulty of this word
  if (((current_row$x1_try + current_row$x2_tries + current_row$x3_tries) >
    (current_row$x3_tries + current_row$x4_tries)) && ((current_row$x1_try + current_row$x2_tries + current_row$x3_tries) >
    (current_row$x4_tries + current_row$x5_tries)) && ((current_row$x1_try + current_row$x2_tries + current_row$x3_tries) >
    (current_row$x5_tries + current_row$x6_tries)) && ((current_row$x1_try + current_row$x2_tries + current_row$x3_tries) >
    (current_row$x6_tries + current_row$x7_or_more_tries_x))){
    difficulty[i]<- "Very Easy"
  }else if (((current_row$x3_tries + current_row$x4_tries) >
    (current_row$x1_try + current_row$x2_tries + current_row$x3_tries)) && ((current_row$x3_tries + current_row$x4_tries) >
    (current_row$x4_tries + current_row$x5_tries)) && ((current_row$x3_tries + current_row$x4_tries) >
    (current_row$x5_tries + current_row$x6_tries)) && ((current_row$x3_tries + current_row$x4_tries) >
    (current_row$x6_tries + current_row$x7_or_more_tries_x))){
    difficulty[i]<- "Easy"
  }else if (((current_row$x4_tries + current_row$x5_tries) >
    (current_row$x1_try + current_row$x2_tries + current_row$x3_tries))== TRUE && ((current_row$x4_tries + current_row$x5_tries) >
    (current_row$x3_tries + current_row$x4_tries))== TRUE && ((current_row$x4_tries + current_row$x5_tries) >
    (current_row$x5_tries + current_row$x6_tries))== TRUE && ((current_row$x4_tries + current_row$x5_tries) >
    (current_row$x6_tries + current_row$x7_or_more_tries_x))== TRUE){
    difficulty[i]= "Medium"
  }else if (((current_row$x5_tries + current_row$x6_tries) >
    (current_row$x1_try + current_row$x2_tries + current_row$x3_tries)) && ((current_row$x5_tries + current_row$x5_tries) >
    (current_row$x3_tries + current_row$x4_tries)) && ((current_row$x5_tries + current_row$x6_tries) >
    (current_row$x4_tries + current_row$x5_tries)) && ((current_row$x5_tries + current_row$x6_tries) >
    (current_row$x6_tries + current_row$x7_or_more_tries_x))){
    difficulty[i]<- "Hard"
  }else if (((current_row$x6_tries + current_row$x7_or_more_tries_x) >
    (current_row$x1_try + current_row$x2_tries + current_row$x3_tries)) && ((current_row$x6_tries + current_row$x7_or_more_tries_x) >
    (current_row$x3_tries + current_row$x4_tries)) && ((current_row$x6_tries + current_row$x7_or_more_tries_x) >
    (current_row$x4_tries + current_row$x5_tries)) && ((current_row$x6_tries + current_row$x7_or_more_tries_x) >
    (current_row$x5_tries + current_row$x6_tries))){
    difficulty[i]<- "Very Hard"
  }
      
}
difficulty<-as_tibble(difficulty)

data$difficulty<-difficulty$value

```

```{r}
#Vowel Counting Function
get_vowel_count <- function(phrase) {
  counter <- 0
  for (i in unlist(strsplit(phrase, ""))) {
    if ( i %in% c("a", "e", "i", "o", "u")) {
      counter <- counter + 1 
    }   
  }
  counter
}

data %>% 
  filter(difficulty == "vh" | difficulty == "h")  
  

#Counting Vowels for every word
vowels<-c()
counter<-0
for (i in 1:nrow(data)){
  current_word = data$word[i]
  print(current_word)
  vowels[i]<- get_vowel_count(current_word)
  print(get_vowel_count(current_word))
}

data$vowel_count<-vowels

#Counting Number of consonants
data$consonant_count<-5-data$vowel_count

#Counting tricky letters
get_tricky_letter_count <- function(phrase) {
  counter <- 0
  for (i in unlist(strsplit(phrase, ""))) {
    if ( i %in% c("r", "u", "w", "z", "x", "y")) {
      counter <- counter + 1 
    }   
  }
  counter
}



```
